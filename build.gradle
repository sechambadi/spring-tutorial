buildscript {
	repositories {
			mavenLocal()
			mavenCentral()
			google()
			jcenter() 
	}
	dependencies {
		classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.10RELEASE' apply false
	id 'com.palantir.docker' version '0.21.0' apply false
	//id 'com.google.cloud.tools.jib' version '1.0.2' apply false
}

allprojects {
	//apply plugin: 'nebula.lint'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'project-report'

//	gradleLint.rules = ['all-dependency'] // add as many rules here as you'd like

	repositories {
		mavenLocal()
		mavenCentral()
		google()
		jcenter()
	}

	configurations {		
		implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	group = 'com.example.platform'
	version = '1.0.0-SNAPSHOT'

}

subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'
	//apply plugin: 'com.google.cloud.tools.jib'
	//jib.to.image = "${project.name}"
	apply plugin: 'com.palantir.docker'

	springBoot {
		buildInfo()
	}

	docker {
		dependsOn build
		name "${project.group}/${jar.baseName}"
		files bootJar.archivePath
		buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
	}

	sourceCompatibility = "$javaVersion"
	targetCompatibility = "$javaVersion"

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}		
		implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	ext {
		set('springBootAdminVersion', '2.1.6')
		set('springCloudVersion', 'Greenwich.SR3')
	}

	dependencies {
		if(project.name != 'config-service') {
			implementation 'org.springframework.cloud:spring-cloud-starter-config'
		}
		implementation('org.springframework.boot:spring-boot-starter-log4j2')
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		implementation 'org.springframework.cloud:spring-cloud-starter'
		implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
		implementation 'de.codecentric:spring-boot-admin-starter-client'
		implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes'
		implementation "com.lmax:disruptor:3.4.2"
		implementation 'org.jolokia:jolokia-core'

        compileOnly 'org.projectlombok:lombok'

		// micrometer dependency for the prometheus
		runtime("io.micrometer:micrometer-registry-prometheus")

		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		annotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}

	dependencyManagement {
		imports {
			mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}
}
